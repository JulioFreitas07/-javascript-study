o que é ECMAScript?

Qual a diferença de linguagem compilada e interpretada?

Qual é a diferença entre powershell e bash?

Por que usamos o nome assets? o que tem nessa pasta?
> Colocamos em assets tudo o que não é html, é uma arquitetura básica para 
  organizar melhor o código.

O que é index.html ?
> Arquivo raiz principal do html no projeto.

como importar css?
> <link rel = "stylesheet" href="caminho do documento css"/>

como importar o script js?
> <script src="caminho do script"></script>

por que fecho um mas não fecho outro?
> por que no caso do <script></script>, eu posso inserir conteúdos dentro, mas no <link/> não.

o sinal == no javascript compara somente o conteúdo, e não os tipos.
Para comparar os tipos e conteúdo, usa-se ===
Da mesmo forma do final de diferente != que só verifica se os conteúdo são diferentes
e não verifica os tipos também. Pra isso, usa-se o sinal !==

o sinal de negação é o !
o E lógico é &&
o OU lógico são duas ||

o ternário é; condição ? severdadeiro : sefalso;

let e var são palavras reservadas do javascript para representar variáveis. No entanto,
var tem escopo global, portanto ao declará-la no arquivo, se você declara 
a var dentro de alguma função depois, o código aceita a declaração novamente.
Já o let, é restrito ao bloco no qual foi declarado, por exemplo, se você declara o let
dentro de um bloco condicional, o let só pode ser usado dentro de bloco condicional e não pode
ser chamado fora daquele bloco.

além do mais hoisting foi algo diferente de se aprender, o fato de poder atribuir uma variável
antes de declará-la é muito diferente mesmo!

constantes são declaradas usando snak upper case, e não fazem hoisting.

o hoisting só é possível ser feito com var. Com const e let não é possível. Let ainda posso reatribuir
valores, mas com const não.

temos o método typeof para dizer o tipo de dado que estamos vendo. Os tipos
primitivos de dados no javascript são: numbers, strings e boolean. E os tipos
compostos são objects e arrays. Também dentro dos primitivos temos o null e 
undefined

tenho alguns métodos interessantes nativos de string como: .replace, .split, .includes
, .length

temos a lib Math, duas ferramentas úteis nesta lib é o Math.floor que arredonda pra baixo
e a Math.ceil() que arredonda pra cima.

também posso usar o toString() para retornar uma variável como string

alguns métodos interessantes que tenho para usar com arrays no javascript:
.push(valores) -> para adicionar elementos ao final do array
.pop() -> para tirar elementos do array 'começa sempre do último'
.shift() -> tira elementos  do array começando pelo início do array
.unshift(valores) -> para adicionar elementos ao inicio do array 
.every(item => item === ValorASerComparado) -> compara se todos os itens do array
são iguais ao ValorASerComparado
.include(valor) -> saber se tem o valor dentro do array
.some(item => item === ValorASerComparado) -> verifica se no array existem pelo menos
algum valor igual ao ValorASerComparado

em objetos tenho chave e valor. Dois métodos de usos valiosos são o Object.values(nomedoobjeto)
e o Object.keys(nome do objeto)


TRATAMENTOS DE ERROS E TIPOS DE ERROS: 

ECMAScript Error
Os erros de ECMAScript (também conhecidos como JavaScript errors) são definidos pela especificação ECMAScript 
e ocorrem quando há problemas na execução do código JavaScript. Eles são parte integrante da linguagem e são gerados
 em situações comuns, como problemas de sintaxe, referências indefinidas, ou operações matemáticas inválidas. 
 Alguns exemplos de erros ECMAScript são:

SyntaxError: Erro de sintaxe no código.
TypeError: Operação realizada em um valor de tipo inadequado.
ReferenceError: Tentativa de acessar uma variável que não está definida.
RangeError: Um número está fora de seu intervalo válido.
EvalError: Problema com a função eval() (pouco comum).


DOMException
DOMException é uma classe de erros que está relacionada ao Document Object Model (DOM) e às APIs da web. Esses erros 
são lançados quando há um problema ao interagir com o DOM ou ao utilizar APIs do navegador, como operações inválidas
 em elementos HTML ou manipulação incorreta de objetos de API. Exemplos comuns de DOMException são:

NotFoundError: Tentativa de acessar um nó que não existe no DOM.
HierarchyRequestError: Inserção de um nó em uma posição que não é permitida dentro do DOM.
WrongDocumentError: Tentativa de usar um nó em um documento diferente do documento onde foi criado.
InvalidCharacterError: Uso de um caractere inválido em uma string que está sendo passada para uma API DOM.
SecurityError: Ação bloqueada por razões de segurança, como tentativas de acessar recursos de diferentes origens 
sem permissão adequada.
Contexto de Uso
ECMAScript errors são encontrados em qualquer código JavaScript e geralmente indicam problemas na lógica ou 
sintaxe do programa. Eles são independentes do contexto do navegador e podem ocorrer em ambientes como Node.js
 ou qualquer outro runtime que suporte JavaScript.

DOMException ocorre exclusivamente no contexto da web, quando o JavaScript está interagindo com o DOM ou outras APIs
 do navegador. Esses erros são específicos ao ambiente do navegador e não seriam encontrados em contextos onde
  o DOM não está presente (por exemplo, em scripts Node.js).

  o throw para a aplicação na hora em que é chamado
  o try catch nós usamos para lidar com o erro, então não é só parar, posso usar o catch para 
  fazer a função de input ser chamada novamente com um aviso por exemplo, ou para
  gerar uma mensagem de erro.